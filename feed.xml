<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://asfork.github.io/</id><title>Bytes Tying</title><subtitle>A devloper focusing on Android, Web and AI.</subtitle> <updated>2022-06-01T10:48:51+08:00</updated> <author> <name>Steve Zhang</name> <uri>https://asfork.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://asfork.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://asfork.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Steve Zhang </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>用 Flask 和 100 行代码写一套 REST API</title><link href="https://asfork.github.io/posts/simple-restful-api-in-100-lines-code-using-flask/" rel="alternate" type="text/html" title="用 Flask 和 100 行代码写一套 REST API" /><published>2016-04-29T11:22:33+08:00</published> <updated>2016-04-29T11:22:33+08:00</updated> <id>https://asfork.github.io/posts/simple-restful-api-in-100-lines-code-using-flask/</id> <content src="https://asfork.github.io/posts/simple-restful-api-in-100-lines-code-using-flask/" /> <author> <name>Steve Zhang</name> </author> <category term="Python" /> <summary> 最近在写后台时用到了 Flask 框架。 作为 Python 刚接触不久的初学者，Flask 带来了极大的满足感。 首先是小巧简洁，对于需求只是搭建一小套 API 来说，用上全功能的 Django 框架未免太“重了。 组件搭配灵活，给开发者充分的自由度。蓝图(Blueprints)设计也提供了更大的扩展潜力。 当然你也可以把上述两条看作缺点，毕竟面对众多 Flask 模块也有一定的试错成本。 另外 Flask 的中文资料十分稀少且落后，一定要阅读英文文档。 本文涉及的主题并不高深，仅仅是强调减轻开发负担的最佳实践和模式。尽量避免啰嗦官方文档中提到的内容。如果你想尝试它们，一定会有对阅读官方文档的急迫需求（这不错吧？）。 组织模式 单一模块 由于项目功能比较简单，只是实现一套小型 API，大部分代码都放到了单一文件 app.py 中。对于一些微项目来说这恰到好处，毕竟只需要... </summary> </entry> <entry><title>Retrofit2 使用及新特性</title><link href="https://asfork.github.io/posts/awesome-retrofit2-you-should-know/" rel="alternate" type="text/html" title="Retrofit2 使用及新特性" /><published>2016-04-29T08:14:33+08:00</published> <updated>2016-04-29T08:14:33+08:00</updated> <id>https://asfork.github.io/posts/awesome-retrofit2-you-should-know/</id> <content src="https://asfork.github.io/posts/awesome-retrofit2-you-should-know/" /> <author> <name>Steve Zhang</name> </author> <category term="Android" /> <summary> 最近 Retrofit2 正式版发布了（当前版本号已经小幅更新到2.0.2），带来了相当多的新特性，内部也默认使用 Okhttp3 作为网络请求库。使用的便捷性比 Retrofit1 再次向前迈了一步。 下面总结了几个自己用到的新特性。 Call 2.0 支持了在一个类型中的同步和异步。只需要使用新的 call 方法。 interface GitHubService { @GET("/repos/{owner}/{repo}/contributors") Call&amp;lt;List&amp;lt;Contributor&amp;gt;&amp;gt; repoContributors( @Path("owner") String owner, @Path("repo") String repo); } Call&amp;lt;List&amp;lt;Contributor&amp;gt;&amp;gt;... </summary> </entry> </feed>
